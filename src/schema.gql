# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Partner {
  id: Int!
  name: String!
  status: String!
  phone: String!
  campaignId: Int!
  userId: Int!
  createdAt: DateTime!
  updateAt: DateTime!
  campaign: [Campaign!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Ticket {
  id: Int!
  userId: Int!
  campaignId: Int!
  expireAt: DateTime!
  createdAt: DateTime!
  updateAt: DateTime!
}

type Campaign {
  id: Int!
  name: String!
  description: String!
  startDate: DateTime!
  endDate: DateTime!
  status: String!
  userId: Int!
  createdAt: DateTime!
  updateAt: DateTime!
  ads: [Ad!]
  tickets: [Ticket!]
  partners: [Partner!]
  user: User!
}

type Ad {
  id: Int!
  title: String!
  content: String!
  type: AdType!
  url: String
  status: AdStatus!
  campaignId: Int!
  createdAt: DateTime!
  updateAt: DateTime!
  campaign: Campaign!
  interactions: [Interaction!]
}

enum AdType {
  IMAGE
  VIDEO
  TEXT
  BANNER
}

enum AdStatus {
  DRAFT
  PENDING
  ACTIVE
  PAUSED
  EXPIRED
  REJECTED
  ARCHIVED
}

type Interaction {
  id: Int!
  userId: Int!
  adId: Int!
  user: User!
  ad: Ad!
  type: String!
  createdAt: DateTime!
}

type User {
  id: Int!
  username: String!
  email: String!
  phone: String!
  interactions: [Interaction!]
  tickets: [Ticket!]
  partners: [Partner!]
  campaigns: [Campaign!]
}

type AuthOutPut {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  user: User!
  token: String!
}

type AuthResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: AuthOutPut
}

type UserResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: User
}

type PaginationInfo {
  totalPages: Int!
  page: Int!
  total: Int!
}

type AdOutput {
  id: Int!
  title: String!
  status: AdStatus
  type: AdType!
  content: String!
  createdAt: DateTime!
  url: String
  campaign: CampaignOutput!
}

type AdsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [AdOutput!]
  pagination: PaginationInfo
}

type AdResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: AdOutput
}

type CampaignOutput {
  id: Int!
  name: String!
  description: String!
  status: CampaignStatus!
  startDate: DateTime!
  endDate: DateTime!
  createdAt: DateTime!
  ads: [AdOutput!]
  partners: [Partner!]
}

enum CampaignStatus {
  DRAFT
  PENDING
  APPROVED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
  REJECTED
}

type CampaignsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [CampaignOutput!]
  pagination: PaginationInfo
}

type CampaignResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: CampaignOutput
}

type PartnerOutput {
  id: Int!
  name: String!
  phone: String!
  createdAt: DateTime!
  campaign: CampaignOutput!
}

type PartnersResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [PartnerOutput!]
  pagination: PaginationInfo
}

type PartnerResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: PartnerOutput
}

type MostInteractedDto {
  adId: Int!
  count: Int!
}

type InteractionOutput {
  id: Float!
  type: String!
  user: User!
  ads: AdOutput!
  createdAt: DateTime!
}

type InteractionsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [InteractionOutput!]
  pagination: PaginationInfo
}

type InteractionResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: InteractionOutput
}

type TicketOutput {
  id: Int!
  status: String!
  expireAt: DateTime!
  createdAt: DateTime!
  user: User!
  campaign: CampaignOutput!
}

type TicketsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [TicketOutput!]
  pagination: PaginationInfo
}

type TicketResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: TicketOutput
}

type RequestOutput {
  id: Int!
  status: String!
  createdAt: DateTime!
  partner: PartnerOutput!
}

type RequestsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [RequestOutput!]
  pagination: PaginationInfo
}

type RequestResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: RequestOutput
}

type Query {
  sayHello: String!
  getUserById(id: Float!): UserResponse!
  getUserByEmail(email: String!): UserResponse!
  getUserByusername(username: String!): UserResponse!
  deleteUser: String!
  getPartnerById(id: Int!): PartnerResponse!
  getPartners(limit: Int, page: Int): PartnersResponse!
  getPartnersWithData(partnerDto: PartnerDto!, limit: Int, page: Int): PartnersResponse!
  getAdsFromPartner(partnerId: Float!, limit: Int, page: Int): AdsResponse!
  getCampaignFromPartner(campaignId: Int!): CampaignResponse!
  getPartnersFromUserAdmin(userId: Int!): PartnersResponse!
  getPartnersFromUser: PartnersResponse!
  getCampaignById(id: Int!): CampaignResponse!
  getCampaigns(campaignDto: CampaignDto!, page: Int, limit: Int): CampaignsResponse!
  getListCampaigns(page: Int, limit: Int): CampaignsResponse!
  getAd(id: Float!): AdResponse!
  getAds(adDto: AdDto!, page: Float! = 1, limit: Float! = 10): AdsResponse!
  ListAds(page: Float! = 1, limit: Float! = 10): AdsResponse!
  getAdsFromCampaign(campaignId: Float!, page: Float! = 1, limit: Float! = 10): AdsResponse!
  getCampaignFromAd(campaignId: Float!): CampaignResponse!
  getInteractionById(id: Int!): InteractionResponse!
  getInteractions(page: Int, limit: Int): InteractionsResponse!
  getUserInteractionsByAdmin(userId: Int!, page: Int, limit: Int): InteractionsResponse!
  getUserInteractions(page: Int, limit: Int): InteractionsResponse!
  countAdViews(adId: Int!): InteractionResponse!
  countAdCkicks(adId: Int!): InteractionResponse!
  getMostInteractedAds(limit: Int): [MostInteractedDto!]!
  getTicketById(id: Int!): TicketResponse
  getUserTickets(page: Int, limit: Int): TicketsResponse!
  getAllTickets(page: Int, limit: Int): TicketsResponse!
  getRequests(status: PartnerStatus!, page: Float! = 1, limit: Float! = 10): RequestsResponse!
}

input PartnerDto {
  name: String
  campaignId: Int
}

input CampaignDto {
  name: String
  description: String
  startDate: DateTime
  endDate: DateTime
  createdAt: DateTime
}

input AdDto {
  title: String
  url: String
  type: AdType
  status: AdStatus
  content: String
  campaignId: Int
  createdAt: DateTime
}

enum PartnerStatus {
  PENDING
  APPROVES
  REJECTED
}

type Mutation {
  register(fcmToken: String!, createUserDto: CreateUserDto!): AuthResponse!
  login(fcmToken: String!, loginDto: LoginDto!): AuthResponse!
  forgotPassword(email: String!): String!
  resetPassword(resetPasswordDto: ResetPasswordDto!): String!
  changePassword(changePasswordDto: ChangePasswordDto!): String!
  adminLogin(fcmToken: String!, loginDto: LoginDto!): AuthResponse!
  managerLogin(fcmToken: String!, loginDto: LoginDto!): AuthResponse!
  logout: Boolean!
  updateUser(updateUserDto: UpdateUserDto!): UserResponse!
  UpdateUserRole(checkEmail: String!, companyId: Float!): String!
  createPartner(createPartner: CreatePartnerDto!): PartnerResponse!
  updatePartner(id: Int!, updateData: PartnerDto!): PartnerResponse!
  deletePartner(id: Int!): PartnerResponse!
  createCampaign(createCampaignDto: CreateCampaignCDto!): CampaignResponse!
  UpdateCampaign(id: Int!, updateCampaignDto: CampaignDto!): CampaignResponse!
  deleteCampaign(id: Int!): CampaignResponse!
  createAd(createAd: CreateADto!, CreateMediaDo: CreateImagDto): AdResponse!
  updateAd(id: Float!, updateAdDto: AdDto!): AdResponse!
  deleteAd(id: Float!): AdResponse!
  uploadImage(createImageInput: CreateImagDto!, dirUpload: String = "avatars"): String!
  createInteraction(data: CreateInteractionDto!): InteractionResponse!
  createTicket(createTicketDto: CreateTicketDto!, email: String!): TicketResponse!
  expireTicket(ticketId: Int!): TicketResponse!
  validateTicket(ticketId: Int!): TicketResponse!
  deleteTicket(ticketId: Int!): String!
  createRequest(campaignId: Float!): RequestResponse!
  getRequestById(requestId: Float!): RequestResponse!
  approvePartnership(requestId: Float!, expireAt: DateTime!, email: String!): RequestResponse!
  rejectPartnership(requestId: Float!): RequestResponse!
}

input CreateUserDto {
  username: String!
  email: String!
  phone: String!
  password: String!
}

input LoginDto {
  email: String!
  password: String!
}

input ResetPasswordDto {
  token: String!
  password: String!
}

input ChangePasswordDto {
  password: String!
  newPassword: String!
}

input UpdateUserDto {
  username: String
  email: String
  phone: String
}

input CreatePartnerDto {
  campaignId: Int!
  userId: Int!
}

input CreateCampaignCDto {
  name: String!
  description: String!
  startDate: DateTime!
  endDate: DateTime!
}

input CreateADto {
  title: String!
  type: AdType!
  content: String!
  camaignId: Int!
}

input CreateImagDto {
  name: String!
  breed: String!
  image: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateInteractionDto {
  type: InterActionType!
  adId: Int!
}

enum InterActionType {
  VIEW
  CLICK
}

input CreateTicketDto {
  campaignId: Int!
  expireAt: DateTime!
}